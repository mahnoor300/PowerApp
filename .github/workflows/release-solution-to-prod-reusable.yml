name: release-solution-to-prod-reusable
# Reusable workflow
# convert solution to managed (using a build PowerPlatform environment for the conversion)
# upload the solution to the GitHub artifacts and deploy to the PROD environment
on:
  workflow_call:
    inputs: 
      solution_name:
        description: 'The solution name.'
        type: string
      solution_shipping_folder:
        description: 'folder name for staging the exported solution *do not change*'        
        type: string
        default: out/ship/
      solution_outbound_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        type: string
        default: out/solutions/
      solution_source_folder: 
       description: 'folder name to be created and checked in *do not change*'
       type: string
       default: solutions/
      solution_release_folder:
       description: 'folder where the released binaries are going to be hosted *do not change*'
       type: string
       default: out/release
      BUILD_ENVIRONMENT_URL:
        description: 'Build environment url.'
        type: string
        required: true      
      PRODUCTION_ENVIRONMENT_URL: 
        description: 'Production environment url.'
        type: string
        required: true
    secrets:
      CLIENT_ID: 
        description: 'The client id'
        required: true
      TENANT_ID: 
        description: 'The tenant id'
        required: true
      envSecret:
        description: 'The secret value for authentication using SPN'
        required: true

jobs:
  convert-to-managed:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true

    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      with:
        cloud: 'Public'
    - name: Debug - Check Customizations.xml
      run: |
        dir out/solutions/devsol/Other
    - name: Pack solution
      uses: microsoft/powerplatform-actions/pack-solution@v1
      with:
        solution-folder: "out/${{ inputs.solution_source_folder}}/${{ inputs.solution_name }}"
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}.zip
        solution-type: Unmanaged
        other-folder-path: "out/solutions/${{ inputs.solution_name }}/Other"  



    - name: Import solution as unmanaged to build env
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        environment-url: ${{inputs.BUILD_ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{vars.TENANT_ID}}
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}.zip
        force-overwrite: true
        publish-changes: true

    - name: Export solution as managed
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{inputs.BUILD_ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }} 
        tenant-id: ${{vars.TENANT_ID}}
        solution-name: ${{ inputs.solution_name }}
        managed: true
        solution-output-file: ${{ inputs.solution_shipping_folder}}/${{ inputs.solution_name }}_managed.zip

    - name: Upload the ready to ship solution to GH artifact store
      uses: actions/upload-artifact@v4
      with:
        name: managedSolutions
        path: ${{ inputs.solution_shipping_folder}}/

  request-approval:
    runs-on: ubuntu-latest
    needs: convert-to-managed
    outputs:
      issue_key: ${{ steps.create-jira-issue.outputs.issue_key }}
    steps:
      - name: Set up JIRA authentication
        run: |
          echo "JIRA_BASE_URL=${{ secrets.JIRA_BASE_URL }}" >> $GITHUB_ENV
          echo "JIRA_USER_EMAIL=${{ secrets.JIRA_USER_EMAIL }}" >> $GITHUB_ENV
          echo "JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}" >> $GITHUB_ENV

      - name: Create Jira Issue for Approval
        id: create-jira-issue
        uses: atlassian/gajira-create@v3
        with:
          project: "PROJ"  # Replace with your Jira project key
          issuetype: "Task"
          summary: "ðŸš€ Approval Required: Release Solution to PROD"
          description: |
            A new managed solution is ready for deployment. Please approve the release.
            **Solution Name:** ${{ inputs.solution_name }}
            **Requested by:** ${{ github.actor }}
            Click [here](https://github.com/${{ github.repository }}/actions) to view the workflow.



      - name: Wait for Jira Approval
        id: wait-approval
        run: |
            ISSUE_KEY=${{ steps.create-jira-issue.outputs.issue_key }}
            echo "Waiting for Jira issue $ISSUE_KEY to be moved to 'Approved' status..."
            while true; do
              ISSUE_STATUS=$(curl -s -u "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
                -X GET -H "Accept: application/json" \
                "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$ISSUE_KEY" | jq -r '.fields.status.name')
              
              echo "Current Jira issue status: $ISSUE_STATUS"
              if [[ "$ISSUE_STATUS" == "Approved" ]]; then
                echo "Approval received! Proceeding with release..."
                break
              fi
              echo "Waiting for approval... checking again in 60 seconds."
              sleep 60
            done
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

  release-to-staging:
    runs-on: windows-latest
    needs: request-approval
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true

    - name: Fetch the ready to ship solution from GH artifact store
      uses: actions/download-artifact@v4
      with:
        name: managedSolutions
        path: ${{ inputs.solution_release_folder}}
        
    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      with:
        cloud: 'Public'
        
    - name: Import solution to prod env
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        environment-url: ${{inputs.PRODUCTION_ENVIRONMENT_URL}}
        app-id: ${{ secrets.CLIENT_ID }}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{ secrets.TENANT_ID }}
        solution-file: ${{ inputs.solution_release_folder}}/${{ inputs.solution_name }}_managed.zip
        force-overwrite: true
        publish-changes: true
