name: release-solution-to-prod-reusable
on:
  workflow_call:
    inputs: 
      solution_name:
        description: 'The solution name.'
        type: string
      solution_shipping_folder:
        description: 'folder name for staging the exported solution *do not change*'        
        type: string
        default: out/ship/
      solution_outbound_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        type: string
        default: out/solutions/
      solution_source_folder: 
       description: 'folder name to be created and checked in *do not change*'
       type: string
       default: solutions/
      solution_release_folder:
       description: 'folder where the released binaries are going to be hosted *do not change*'
       type: string
       default: out/release
      BUILD_ENVIRONMENT_URL:
        description: 'Build environment url.'
        type: string
        required: true      
      PRODUCTION_ENVIRONMENT_URL: 
        description: 'Production environment url.'
        type: string
        required: true
    secrets:
      CLIENT_ID: 
        description: 'The client id'
        required: true
      TENANT_ID: 
        description: 'The tenant id'
        required: true
      envSecret:
        description: 'The secret value for authentication using SPN'
        required: true

jobs:
  convert-to-managed:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
 
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
 
    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      with:
        cloud: 'Public'
    - name: Debug - Check Customizations.xml
      run: |
        dir out/solutions/devsol/Other
    - name: Pack solution
      uses: microsoft/powerplatform-actions/pack-solution@v1
      with:
        solution-folder: "out/${{ inputs.solution_source_folder}}/${{ inputs.solution_name }}"
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}.zip
        solution-type: Unmanaged
        other-folder-path: "out/solutions/${{ inputs.solution_name }}/Other"  
 
 
    - name: Import solution as unmanaged to build env
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        environment-url: ${{inputs.BUILD_ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{vars.TENANT_ID}}
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}.zip
        force-overwrite: true
        publish-changes: true
 
    - name: Export solution as managed
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{inputs.BUILD_ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }} 
        tenant-id: ${{vars.TENANT_ID}}
        solution-name: ${{ inputs.solution_name }}
        managed: true
        solution-output-file: ${{ inputs.solution_shipping_folder}}/${{ inputs.solution_name }}_managed.zip
 
    - name: Upload the ready to ship solution to GH artifact store
      uses: actions/upload-artifact@v4
      with:
        name: managedSolutions
        path: ${{ inputs.solution_shipping_folder}}/
 
        
  request-approval:
    runs-on: ubuntu-latest
    needs: convert-to-managed
    outputs:
      issue_key: ${{ steps.create-jira-issue.outputs.issue_key }}
    steps:
      - name: Create Jira Issue for Approval
        id: create-jira-issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jiraUrl = `${{ secrets.JIRA_URL }}/rest/api/3/issue`;
            const auth = Buffer.from(`${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}`).toString('base64');
 
            const issueData = {
              fields: {
                project: {
                  key: "${{ secrets.JIRA_PROJECT_KEY }}"
                },
                summary: `ðŸš€ Approval Required: Release Solution to PROD - ${{ inputs.solution_name }}`,
                description: {
                  type: "doc",
                  version: 1,
                  content: [
                    {
                      type: "paragraph",
                      content: [
                        {
                          type: "text",
                          text: `A new managed solution is ready for deployment. Please approve the release by transitioning this issue to "Approved".\n\n`
                        },
                        {
                          type: "text",
                          text: `**Solution Name:** ${{ inputs.solution_name }}\n`
                        },
                        {
                          type: "text",
                          text: `**Requested by:** @${{ github.actor }}\n\n`
                        },
                        {
                          type: "text",
                          text: `Click [here](https://github.com/${{ github.repository }}/actions) to view the workflow.`
                        }
                      ]
                    }
                  ]
                },
                issuetype: {
                  name: "Task"
                }
              }
            };
 
            const response = await fetch(jiraUrl, {
              method: 'POST',
              headers: {
                'Authorization': `Basic ${auth}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(issueData)
            });
 
            const issue = await response.json();
            core.setOutput("issue_key", issue.key);
 
      - name: Wait for Jira Issue Approval
        id: wait-jira-approval
        run: |
          ISSUE_KEY=${{ steps.create-jira-issue.outputs.issue_key }}
          echo "Waiting for Jira issue $ISSUE_KEY to be approved..."
          while true; do
            ISSUE_STATUS=$(curl -s -u "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              "${{ secrets.JIRA_URL }}/rest/api/3/issue/$ISSUE_KEY" | jq -r '.fields.status.name')
            echo "Current issue status: $ISSUE_STATUS"
            if [[ "$ISSUE_STATUS" == "Approved" ]]; then
              echo "Approval received! Proceeding with release..."
              break
            fi
            echo "Waiting for approval... checking again in 30 seconds."
            sleep 30
          done
 
 
  release-to-staging:
    runs-on: windows-latest
    needs: request-approval
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
 
    - name: Fetch the ready to ship solution from GH artifact store
      uses: actions/download-artifact@v4
      with:
        name: managedSolutions
        path: ${{ inputs.solution_release_folder}}
    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      with:
        cloud: 'Public'
    - name: Import solution to prod env
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        environment-url: ${{inputs.PRODUCTION_ENVIRONMENT_URL}}
        app-id: ${{ secrets.CLIENT_ID }}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{ secrets.TENANT_ID }}
        solution-file: ${{ inputs.solution_release_folder}}/${{ inputs.solution_name }}_managed.zip
        force-overwrite: true
        publish-changes: true
