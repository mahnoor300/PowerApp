name: export-and-branch-solution
on:
  push:
    branches: 
      - main
    inputs:
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
        description: 'folder name to be created and checked in *do not change*'
        required: true
        default: solutions/
permissions:
  contents: write
jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
        
    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      with:
        cloud: 'Public'
 
    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{secrets.PowerPlatformSPN}}
        tenant-id: ${{secrets.TENANT_ID}}
 
    - name: export-solution action
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{secrets.TENANT_ID}}
        solution-name: ${{vars.SOLUTION_NAME}}
        solution-output-file: out/exported/${{vars.SOLUTION_NAME}}.zip
 
    - name: unpack-solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: out/exported/${{vars.SOLUTION_NAME}}.zip
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-type: 'Unmanaged'
        overwrite-files: true
        
    - name: branch-solution, prepare it for a PullRequest
      uses: microsoft/powerplatform-actions/branch-solution@v1
      with:
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-target-folder: solutions/SCRUM-1-${{vars.SOLUTION_NAME}}
        repo-token: ${{ secrets.ACCESS_SECRET }}
        allow-empty-commit: true

  # Capture the branch name dynamically based on the push event
    - name: Set dynamic branch name
      id: set-branch-name
      run: |
        NEW_BRANCH=$(echo ${GITHUB_REF#refs/heads/})
        echo "Branch name is: $NEW_BRANCH"
        echo "::set-output name=branch_name::$NEW_BRANCH"

    # Push the new branch to GitHub
    - name: Push the new branch to GitHub
      run: |
        git push https://x-access-token:${{ secrets.ACCESS_SECRET }}@github.com/${{ github.repository }} ${{ steps.set-branch-name.outputs.branch_name }}

    # Checkout the main branch
    - name: Checkout the main branch
      run: |
        git checkout main
        git pull origin main

    # Merge the new branch into main
    - name: Merge the new branch into main
      run: |
        git merge ${{ steps.set-branch-name.outputs.branch_name }}

    # Push merged changes to main
    - name: Push merged changes to main
      run: |
        git push https://x-access-token:${{ secrets.ACCESS_SECRET }}@github.com/${{ github.repository }} main
        pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
        merge-method: 'merge'  # You can also use 'squash' or 'rebase' if needed
