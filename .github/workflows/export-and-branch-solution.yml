name: export-and-branch-solution
on:
  push:
    branches: 
      - main
    inputs:
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
        description: 'folder name to be created and checked in *do not change*'
        required: true
        default: solutions/
permissions:
  contents: write
jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
        
    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      with:
        cloud: 'Public'
 
    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{secrets.PowerPlatformSPN}}
        tenant-id: ${{secrets.TENANT_ID}}
 
    - name: export-solution action
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{secrets.TENANT_ID}}
        solution-name: ${{vars.SOLUTION_NAME}}
        solution-output-file: out/exported/${{vars.SOLUTION_NAME}}.zip
 
    - name: unpack-solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: out/exported/${{vars.SOLUTION_NAME}}.zip
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-type: 'Unmanaged'
        overwrite-files: true

   # Branch-solution step generates the branch name dynamically
    - name: branch-solution, prepare it for a PullRequest
      id: branch-solution
      uses: microsoft/powerplatform-actions/branch-solution@v1
      with:
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-target-folder: solutions/SCRUM-1-${{vars.SOLUTION_NAME}}
        repo-token: ${{ secrets.ACCESS_SECRET }}
        allow-empty-commit: true


    # Create a Pull Request
    - name: Create Pull Request
      id: create-pr
      uses: peter-evans/create-pull-request@v3
      with:
        token: ${{ secrets.ACCESS_SECRET }}
        commit-message: "Automated PR: Export and branch solution"
        title: "Automated PR: Export and branch solution"
        body: "This PR was automatically created to merge the exported solution changes."
        branch: ${{ steps.generate-branch-name.outputs.branch-name }}
        base: main
        delete-branch: true

    # Merge the Pull Request using GitHub API
    - name: Merge Pull Request
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_SECRET }}
      run: |
        PR_NUMBER=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?state=open&head=${{ steps.generate-branch-name.outputs.branch-name }}" \
          | jq -r '.[0].number')

        if [ -z "$PR_NUMBER" ]; then
          echo "No PR found for branch ${{ steps.generate-branch-name.outputs.branch-name }}"
          exit 1
        fi

        echo "Merging PR #$PR_NUMBER"
        curl -s -X PUT -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"commit_title": "Automated PR: Export and branch solution", "merge_method": "merge"}' \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER/merge"

        if [ $? -eq 0 ]; then
          echo "PR #$PR_NUMBER merged successfully"
        else
          echo "Failed to merge PR #$PR_NUMBER"
          exit 1
        fi
