name: export-and-branch-solution
on:
  push:
    branches: 
      - main
    inputs:
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
        description: 'folder name to be created and checked in *do not change*'
        required: true
        default: solutions/
permissions:
  contents: write
jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
        
    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      with:
        cloud: 'Public'
 
    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{secrets.PowerPlatformSPN}}
        tenant-id: ${{secrets.TENANT_ID}}
 
    - name: export-solution action
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{secrets.TENANT_ID}}
        solution-name: ${{vars.SOLUTION_NAME}}
        solution-output-file: out/exported/${{vars.SOLUTION_NAME}}.zip
 
    - name: unpack-solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: out/exported/${{vars.SOLUTION_NAME}}.zip
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-type: 'Unmanaged'
        overwrite-files: true

   # Branch-solution step generates the branch name dynamically
    - name: branch-solution, prepare it for a PullRequest
      id: branch-solution
      uses: microsoft/powerplatform-actions/branch-solution@v1
      with:
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-target-folder: solutions/SCRUM-1-${{vars.SOLUTION_NAME}}
        repo-token: ${{ secrets.ACCESS_SECRET }}
        allow-empty-commit: true

    # Explicitly check out the newly created branch
    - name: Checkout the dynamically created branch
      id: checkout-branch
      shell: pwsh
      run: |
        # Fetch all branches from the remote
        git fetch --all

        # Get the name of the dynamically created branch
        $BRANCH_NAME = git branch -r | Select-String -Pattern "SCRUM-1-${{vars.SOLUTION_NAME}}-\d{8}-\d{4}" | ForEach-Object { $_.ToString().Trim() }
        $BRANCH_NAME = $BRANCH_NAME -replace 'origin/', ''

        # Check out the branch
        git checkout $BRANCH_NAME

        # Set the branch name as an environment variable
        echo "BRANCH_NAME=$BRANCH_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "Branch name set to: $BRANCH_NAME"

    # Push the new branch to GitHub
    - name: Push the new branch to GitHub
      run: |
        git push https://x-access-token:${{ secrets.ACCESS_SECRET }}@github.com/${{ github.repository }} ${{ env.BRANCH_NAME }}

    # Checkout the main branch
    - name: Checkout the main branch
      run: |
        git checkout main
        git pull origin main

    # Merge the dynamically created branch into main
    - name: Merge the new branch into main
      run: |
        git merge ${{ env.BRANCH_NAME }}

    # Push merged changes to main
    - name: Push merged changes to main
      run: |
        git push https://x-access-token:${{ secrets.ACCESS_SECRET }}@github.com/${{ github.repository }} main
