name: export-and-branch-solution
on:
  push:
    branches: 
      - main
    inputs:
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
        description: 'folder name to be created and checked in *do not change*'
        required: true
        default: solutions/
permissions:
  contents: write
jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
        
    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      with:
        cloud: 'Public'
 
    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{secrets.PowerPlatformSPN}}
        tenant-id: ${{secrets.TENANT_ID}}
 
    - name: export-solution action
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{secrets.TENANT_ID}}
        solution-name: ${{vars.SOLUTION_NAME}}
        solution-output-file: out/exported/${{vars.SOLUTION_NAME}}.zip
 
    - name: unpack-solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: out/exported/${{vars.SOLUTION_NAME}}.zip
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-type: 'Unmanaged'
        overwrite-files: true

   # Branch-solution step generates the branch name dynamically
    - name: branch-solution, prepare it for a PullRequest
      id: branch-solution
      uses: microsoft/powerplatform-actions/branch-solution@v1
      with:
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-target-folder: solutions/SCRUM-1-${{vars.SOLUTION_NAME}}
        repo-token: ${{ secrets.ACCESS_SECRET }}
        allow-empty-commit: true


    - name: Fetch and determine the most recent branch
      id: recent_branch
      run: |
        git fetch --all
        echo "RECENT_BRANCH=$(git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/remotes/origin | Where-Object { $_ -ne 'origin/main' } | Select-Object -First 1 | ForEach-Object { $_ -replace 'origin/', '' })" >> $GITHUB_ENV
      shell: pwsh

    - name: Fetch and merge the most recent branch
      run: |
        git fetch --all
  
        $RECENT_BRANCH = git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/remotes/origin | Where-Object { $_ -ne "origin/main" } | Select-Object -First 1
  
        if (-not $RECENT_BRANCH) {
          Write-Error "No recent branch found to merge."
          git branch -a # Debug: List all branches
          exit 1
        }
    
        Write-Output "Most recent branch: $RECENT_BRANCH"
  
    
# Create Pull Request to main from the dynamically generated branch
    - name: Create Pull Request to main
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.ACCESS_SECRET }}
        base: main
        head: ${{RECENT_BRANCH}}
        title: 'Auto PR from branch ${{ $RECENT_BRANCH}}'
        body: 'This is an automatically generated pull request from the branch ${{ $RECENT_BRANCH  }}.'

