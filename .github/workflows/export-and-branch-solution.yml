name: export-and-branch-solution

on:
  workflow_dispatch:
    inputs:
      issue_key:
        description: "Jira Issue Key"
        required: true
        type: string
      summary:
        description: "Issue Summary"
        required: false
        type: string
      solution_name:
        description: "Name of the solution"
        required: true
        type: string
      solution_exported_folder:
        description: "Folder name for staging the exported solution *do not change*"
        required: true
        default: out/exported/
      solution_folder:
        description: "Staging the unpacked solution folder before check-in *do not change*"
        required: true
        default: out/solutions/
      solution_target_folder: 
        description: "Folder name to be created and checked in *do not change*"
        required: true
        default: solutions/

permissions:
  contents: write

jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
        
      - name: Install PAC CLI
        uses: microsoft/powerplatform-actions/actions-install@v1
        with:
          cloud: 'Public'
      
      - name: Display Jira Issue Information
        run: |
          echo "Jira Issue Key: ${{ github.event.inputs.issue_key }}"
          echo "Summary: ${{ github.event.inputs.summary }}"

      - name: Export Solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ secrets.ENVIRONMENT_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.PowerPlatformSPN }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ inputs.solution_name }}
          solution-output-file: out/exported/${{ inputs.solution_name }}.zip

      - name: Unpack Solution
        uses: microsoft/powerplatform-actions/unpack-solution@v1
        with:
          solution-file: out/exported/${{ inputs.solution_name }}.zip
          solution-folder: out/solutions/${{ inputs.solution_name }}
          solution-type: 'Unmanaged'
          overwrite-files: true

      - name: Branch Solution
        id: branch-solution
        uses: microsoft/powerplatform-actions/branch-solution@v1
        with:
          solution-folder: out/solutions/${{ inputs.solution_name }}
          solution-target-folder: solutions/${{inputs.issue_key}}-${{ inputs.solution_name }}
          repo-token: ${{ secrets.GH_TOKEN }}
          allow-empty-commit: true

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: "Merging solution branch"
          title: "Automated PR for solution branch linked to Jira Issue ${{ inputs.issue_key }}"
          body: |
            **Jira Issue:** [${{ inputs.issue_key }}](https://your-jira-instance.atlassian.net/browse/${{ inputs.issue_key }})
            **Summary:** ${{ inputs.summary }}
            - Exported solution: ${{ inputs.solution_name }}
          branch: ${{inputs.issue_key}}-${{ inputs.solution_name }}
          base: main
          delete-branch: false
  
      - name: Wait for PR Approval
        run: |
          $PR_NUMBER = "${{ steps.create_pr.outputs.pull-request-number }}"
          if (-not $PR_NUMBER) {
            Write-Error "PR number not found. Ensure the 'Create Pull Request' step succeeded."
            exit 1
          }
          Write-Output "Waiting for PR #$PR_NUMBER to be approved..."
          
          # Small delay to ensure PR is fully created
          Start-Sleep -Seconds 10
          
          while ($true) {
            $APPROVAL_COUNT = gh api "repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews" --jq '[.[] | select(.state=="APPROVED")] | length' 2>&1
            Write-Output "Raw approval count response: $APPROVAL_COUNT"
            
            # Check if the response is a number
            if ($APPROVAL_COUNT -match '^\d+$') {
              $APPROVAL_COUNT_INT = [int]$APPROVAL_COUNT
              Write-Output "Parsed approval count: $APPROVAL_COUNT_INT"
              if ($APPROVAL_COUNT_INT -gt 0) {
                Write-Output "PR #$PR_NUMBER has been approved! Proceeding..."
                break
              }
            } else {
              Write-Output "Invalid approval count response: $APPROVAL_COUNT"
            }
            
            Write-Output "Waiting for approval... checking again in 30 seconds."
            Start-Sleep -Seconds 30
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  merge-pr:
    needs: export-from-dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Merge Pull Request
        run: |
          gh pr merge --auto --squash --delete-branch ${{inputs.issue_key}}-${{ github.event.inputs.solution_name }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
 

      - name: Trigger Release Workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: "call-release-solution.yml",
              ref: "main",
              inputs: {
                solution_name: "${{ github.event.inputs.solution_name }}"
              }
            });
