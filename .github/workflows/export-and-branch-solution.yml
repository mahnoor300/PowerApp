name: export-and-branch-solution
on:
  push:
    branches: 
      - main
    inputs:
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
        description: 'folder name to be created and checked in *do not change*'
        required: true
        default: solutions/
permissions:
  contents: write
jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
        
    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      with:
        cloud: 'Public'
 
    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{secrets.PowerPlatformSPN}}
        tenant-id: ${{secrets.TENANT_ID}}
 
    - name: export-solution action
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{secrets.ENVIRONMENT_URL}}
        app-id: ${{secrets.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{secrets.TENANT_ID}}
        solution-name: ${{vars.SOLUTION_NAME}}
        solution-output-file: out/exported/${{vars.SOLUTION_NAME}}.zip
 
    - name: unpack-solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: out/exported/${{vars.SOLUTION_NAME}}.zip
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-type: 'Unmanaged'
        overwrite-files: true

   # Branch-solution step generates the branch name dynamically
    - name: branch-solution, prepare it for a PullRequest
      id: branch-solution
      uses: microsoft/powerplatform-actions/branch-solution@v1
      with:
        solution-folder: out/solutions/${{vars.SOLUTION_NAME}}
        solution-target-folder: solutions/SCRUM-1-${{vars.SOLUTION_NAME}}
        repo-token: ${{ secrets.ACCESS_SECRET }}
        allow-empty-commit: true
    # Capture the dynamically generated branch name
    - name: Set dynamic branch name
      id: set-branch-name
      shell: pwsh
      run: |
        # Get the current branch name
        $BRANCH_NAME = git rev-parse --abbrev-ref HEAD
        echo "BRANCH_NAME=$BRANCH_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "Branch name set to: $BRANCH_NAME"

    # Create a Pull Request
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.ACCESS_SECRET }}
        branch: ${{ env.BRANCH_NAME }}
        base: main
        title: "Automated PR for ${{vars.SOLUTION_NAME}}"
        body: "This is an automated pull request for the solution ${{vars.SOLUTION_NAME}}."
        commit-message: "Automated commit for ${{vars.SOLUTION_NAME}}"
        delete-branch: true

    # Merge the Pull Request
    - name: Merge Pull Request
      uses: actions/github-script@v6
      with:
        script: |
          const { data: pr } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: `${{ env.BRANCH_NAME }}`,
            base: 'main',
            state: 'open'
          });
          if (pr.length > 0) {
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr[0].number,
              merge_method: 'merge'
            });
          }
